
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COMMA COMMENT DIVIDE FUNCTION IDENTIFIER LBRACE LPAREN MINUS NUMBER PLUS RBRACE RETURN RPAREN SEMICOLON TIMESprogram : function_listfunction_list : function function_list\n                      | functionfunction : FUNCTION IDENTIFIER LPAREN param_list RPAREN LBRACE statement_list RBRACEparam_list : IDENTIFIER COMMA param_list\n                   | IDENTIFIER\n                   | emptystatement_list : statement statement_list\n                       | statementstatement : RETURN expression SEMICOLON\n                 | IDENTIFIER ASSIGN expression SEMICOLONexpression : expression PLUS term\n                  | expression MINUS term\n                  | termterm : term TIMES factor\n            | term DIVIDE factor\n            | factorfactor : NUMBER\n              | IDENTIFIER\n              | LPAREN expression RPARENempty :'
    
_lr_action_items = {'FUNCTION':([0,3,20,],[4,4,-4,]),'$end':([1,2,3,5,20,],[0,-1,-3,-2,-4,]),'IDENTIFIER':([4,7,11,14,17,18,19,27,29,30,31,32,33,35,],[6,8,8,15,15,26,26,26,-10,26,26,26,26,-11,]),'LPAREN':([6,18,19,27,30,31,32,33,],[7,27,27,27,27,27,27,27,]),'RPAREN':([7,8,9,10,11,13,23,24,25,26,34,36,37,38,39,40,],[-21,-6,12,-7,-21,-5,-14,-17,-18,-19,40,-12,-13,-15,-16,-20,]),'COMMA':([8,],[11,]),'LBRACE':([12,],[14,]),'RETURN':([14,17,29,35,],[18,18,-10,-11,]),'ASSIGN':([15,],[19,]),'RBRACE':([16,17,21,29,35,],[20,-9,-8,-10,-11,]),'NUMBER':([18,19,27,30,31,32,33,],[25,25,25,25,25,25,25,]),'SEMICOLON':([22,23,24,25,26,28,36,37,38,39,40,],[29,-14,-17,-18,-19,35,-12,-13,-15,-16,-20,]),'PLUS':([22,23,24,25,26,28,34,36,37,38,39,40,],[30,-14,-17,-18,-19,30,30,-12,-13,-15,-16,-20,]),'MINUS':([22,23,24,25,26,28,34,36,37,38,39,40,],[31,-14,-17,-18,-19,31,31,-12,-13,-15,-16,-20,]),'TIMES':([23,24,25,26,36,37,38,39,40,],[32,-17,-18,-19,32,32,-15,-16,-20,]),'DIVIDE':([23,24,25,26,36,37,38,39,40,],[33,-17,-18,-19,33,33,-15,-16,-20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'function_list':([0,3,],[2,5,]),'function':([0,3,],[3,3,]),'param_list':([7,11,],[9,13,]),'empty':([7,11,],[10,10,]),'statement_list':([14,17,],[16,21,]),'statement':([14,17,],[17,17,]),'expression':([18,19,27,],[22,28,34,]),'term':([18,19,27,30,31,],[23,23,23,36,37,]),'factor':([18,19,27,30,31,32,33,],[24,24,24,24,24,38,39,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function_list','program',1,'p_program','lexparse.py',74),
  ('function_list -> function function_list','function_list',2,'p_function_list','lexparse.py',78),
  ('function_list -> function','function_list',1,'p_function_list','lexparse.py',79),
  ('function -> FUNCTION IDENTIFIER LPAREN param_list RPAREN LBRACE statement_list RBRACE','function',8,'p_function','lexparse.py',86),
  ('param_list -> IDENTIFIER COMMA param_list','param_list',3,'p_param_list','lexparse.py',90),
  ('param_list -> IDENTIFIER','param_list',1,'p_param_list','lexparse.py',91),
  ('param_list -> empty','param_list',1,'p_param_list','lexparse.py',92),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','lexparse.py',101),
  ('statement_list -> statement','statement_list',1,'p_statement_list','lexparse.py',102),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement','lexparse.py',109),
  ('statement -> IDENTIFIER ASSIGN expression SEMICOLON','statement',4,'p_statement','lexparse.py',110),
  ('expression -> expression PLUS term','expression',3,'p_expression','lexparse.py',117),
  ('expression -> expression MINUS term','expression',3,'p_expression','lexparse.py',118),
  ('expression -> term','expression',1,'p_expression','lexparse.py',119),
  ('term -> term TIMES factor','term',3,'p_term','lexparse.py',126),
  ('term -> term DIVIDE factor','term',3,'p_term','lexparse.py',127),
  ('term -> factor','term',1,'p_term','lexparse.py',128),
  ('factor -> NUMBER','factor',1,'p_factor','lexparse.py',135),
  ('factor -> IDENTIFIER','factor',1,'p_factor','lexparse.py',136),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','lexparse.py',137),
  ('empty -> <empty>','empty',0,'p_empty','lexparse.py',144),
]
